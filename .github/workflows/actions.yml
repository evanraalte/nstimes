name: linting and tests

on:
  pull_request:
  push:
    branches:
      - main
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0
  tests:
    needs: pre-commit
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]
        poetry-version: ["1.7.1"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        ref: ${{ github.head_ref }}
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      # see details (matrix, python-version, python-version-file, etc.)
      # https://github.com/actions/setup-python
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install
    - name: Run the automated tests (ignore deprecation errors )
      run: poetry run pytest -W ignore::DeprecationWarning --cov-report xml --cov=nstimes tests/
      env:
        NS_API_TOKEN: ${{ secrets.NS_API_TOKEN }}
  bump-version:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        ref: ${{ github.head_ref }}
    - name: Install Python
      uses: actions/setup-python@v4
    - name: Run increment_version script 
      run: |
        python -m pip install toml
        python bump_version.py
    - name: Commit, Tag and push changes
      run: |
        VERSION=$(python -c 'import tomllib; print("v" + tomllib.load(open("./pyproject.toml","rb"))["tool"]["poetry"]["version"])')
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add pyproject.toml
        git commit -m "Bump version to $VERSION"
        git tag $VERSION
        git push && git push --tags
    - name: Build and publish to pypi
      uses: JRubics/poetry-publish@v1.17
      with:
        pypi_token: ${{ secrets.PYPI_TOKEN }}
